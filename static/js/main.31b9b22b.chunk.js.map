{"version":3,"sources":["components/Main/Table/Timer.js","components/Main/Table/CardShowing.js","components/Main/Table/startGame.js","components/Main/Table/TakeBack.js","components/Main/Table.js","components/Main/Foundation/Top.js","components/Main/Foundation/Reveal.js","components/Main/Foundation/Trash.js","components/Main/Foundation.js","components/Main/Columns/Bottom.js","components/Main/Columns.js","components/Card.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Timer","second","this","props","time","minute","toString","length","id","React","Component","CardShowing","state","value","event","setState","parseInt","target","console","log","setVar","getVar","onChange","e","handleChange","StartGame","onClick","handleClick","TakeBack","Table","index","Top","found","dataTransfer","setData","name","preventDefault","data","getData","className","cardComponent","draggable","onDragStart","onDragOver","allowDrop","onDrop","Reveal","Trash","Foundation","key","reveal","trash","Bottom","dataList","Columns","divs","i","idName","push","Card","src","style","row","column","Main","mainComponent","variables","cards","holding","holder","f1","f2","f3","f4","height","width","showPercentOfCard","timer","beginned","preventer","lastAct","setCard","num","suit","vars","number","inTrash","includes","inFound","foundNo","zAxis","show","isDiffColor","card","isOneLower","isOneHigher","reset","duang","getColumn","columnCards","output","breaker","splice","undefined","isBelowHolder","getCard","getCardPos","columnHeight","columnNo","count","init","i2","deck","randomInt","deckLength","render","setInterval","allColumnComponents","columnComponents","element","class","top","allTrashComponents","allRevealComponents","allFoundComponents","foundation","oneFoundComponents","checkVictory","thing","string","indexOf","min","max","Math","floor","random","trashClicked","shift","cardClicked","drag","last","list","cardBelow","listLength","lastActLink","mainDish","bottomClicked","topClicked","isNaN","takeBack","code","split","substring","action","prev","pop","cPos","rPos","descend","targetColumn","targetRow","unshift","win","allCardPictures","j","source","alt","retryGame","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31b9b22b.chunk.js","sourcesContent":["import React from 'react';\r\n//import NameList from './NameList/NameList.js';\r\n\r\nexport default class Timer extends React.Component {\r\n  render(){\r\n    var second = this.props.time;\r\n    var minute = 0;\r\n    while (second >= 60) {\r\n        second -= 60;\r\n        minute++;\r\n    }\r\n    minute = minute.toString(10);\r\n    second = second.toString(10);\r\n    while (minute.length < 2) {\r\n        minute = \"0\" + minute;\r\n    }\r\n\r\n    while (second.length < 2) {\r\n        second = \"0\" + second;\r\n    }\r\n    return(\r\n      <div id={this.props.id}>{minute}:{second}</div>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\n//import NameList from './NameList/NameList.js';\r\n\r\nexport default class CardShowing extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 25};\r\n  }\r\n  handleChange(event) {\r\n    this.setState({value: parseInt(event.target.value)});\r\n    console.log(event.target.value)\r\n    this.props.setVar(\"showPercentOfCard\", event.target.value);\r\n    if (this.props.getVar(\"beginned\")){\r\n      this.props.getVar(\"render\")();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <input id=\"showPercent\" value={this.state.value || 0} onChange={(e) => this.handleChange(e)}></input>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\n//import NameList from './NameList/NameList.js';\r\n\r\nexport default class StartGame extends React.Component {\r\n  handleClick(){\r\n    this.props.getVar(\"init\")();\r\n  }\r\n  render(){\r\n    return(\r\n      <button id={this.props.id} onClick={(e) => this.handleClick()}>Let The Game Begin!</button>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\n//import NameList from './NameList/NameList.js';\r\n\r\nexport default class TakeBack extends React.Component {\r\n  handleClick(){\r\n    this.props.getVar(\"takeBack\")();\r\n  }\r\n  render(){\r\n    return(\r\n      <button id={this.props.id} onClick={() => this.handleClick()}>Takeback</button>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\nimport Timer from './Table/Timer.js';\r\nimport CardShowing from './Table/CardShowing.js';\r\nimport StartGame from './Table/startGame.js';\r\nimport TakeBack from './Table/TakeBack.js';\r\n\r\nexport default class Table extends React.Component {\r\n  render(){\r\n    return(\r\n      <div id=\"table\">\r\n        < Timer id=\"timer\" time={this.props.getVar(\"time\")}/>\r\n        < StartGame id=\"start\" setVar={(index, value) => this.props.setVar(index, value)} getVar={(index) => this.props.getVar(index)}/>\r\n        < TakeBack id=\"tb\" getVar={(index) => this.props.getVar(index)} />\r\n        <p>% of card showing</p>\r\n        < CardShowing setVar={(index, value) => this.props.setVar(index, value)} getVar={(index) => this.props.getVar(index)}/>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\n\r\nexport default class Top extends React.Component {\r\n  handleClick(){\r\n    this.props.getVar(\"topClicked\")(this.props.id[1]);\r\n  }\r\n  onDragStart(event){\r\n    let found = this.props.getVar(\"found\")[\"f\" + this.props.id[1]];\r\n    if (found.length > 0){\r\n      event.dataTransfer.setData(\"data\", found[found.length - 1].name);\r\n    }\r\n  }\r\n  allowDrop(event){\r\n    event.preventDefault();\r\n  }\r\n  onDrop(event){\r\n    event.preventDefault();\r\n    let data = event.dataTransfer.getData(\"data\");\r\n    if (data){\r\n      this.props.getVar(\"cardClicked\")(data, true);\r\n      this.props.getVar(\"topClicked\")(this.props.id[1]);\r\n    }\r\n  }\r\n  render(){\r\n    if (this.props.id === \"useless\" || !(this.props.data)){\r\n      return(\r\n        <div id={this.props.id} className={this.props.className}>\r\n        \r\n        </div>\r\n      )\r\n    }\r\n    let cardComponent = this.props.cardComponent;\r\n    let getVar = this.props.getVar;\r\n    let setVar = this.props.setVar;\r\n    let running = getVar(\"beginned\");\r\n    return(\r\n      <div draggable=\"true\" onDragStart={(e) => this.onDragStart(e)} onDragOver={(e) => this.allowDrop(e)} onDrop={(e) => this.onDrop(e)} id={this.props.id} className={this.props.className} onClick={() => this.handleClick()}>\r\n        {this.props.data}\r\n      </div>\r\n    );\r\n  } \r\n}","import React from 'react';\r\n\r\nexport default class Reveal extends React.Component {\r\n  render(){\r\n    let cardComponent = this.props.cardComponent;\r\n    let getVar = this.props.getVar;\r\n    let setVar = this.props.setVar;\r\n    let running = getVar(\"beginned\");\r\n    return(\r\n      <div id={this.props.id} className={this.props.className}>\r\n        {this.props.data}\r\n      </div>\r\n    );\r\n  } \r\n}","import React from 'react';\r\n\r\nexport default class Trash extends React.Component {\r\n  handleClick(e){\r\n    let getVar = this.props.getVar;\r\n    let setVar = this.props.setVar;\r\n    let running = getVar(\"beginned\");\r\n    if (running){\r\n      getVar(\"trashClicked\")();\r\n    }\r\n  }\r\n  render(){\r\n    let CardComponent = this.props.cardComponent;\r\n    let data = this.props.data;\r\n    if (data){\r\n      return(\r\n        <div id={this.props.id} className={this.props.className} onClick={(e) => this.handleClick(e)}>\r\n          {data}\r\n        </div>\r\n      );\r\n    }else{\r\n      return(\r\n        <div id={this.props.id} className={this.props.className} onClick={(e) => this.handleClick(e)}>\r\n\r\n        </div>\r\n      );\r\n    }\r\n  } \r\n}","import React from 'react';\r\nimport Top from './Foundation/Top.js';\r\nimport Reveal from './Foundation/Reveal.js';\r\nimport Trash from './Foundation/Trash.js';\r\n\r\nexport default class Foundation extends React.Component {\r\n  render(){\r\n    let getVar = this.props.getVar;\r\n    let setVar = this.props.setVar;\r\n    let running = getVar(\"beginned\");\r\n    return(\r\n      <div id={this.props.id}>\r\n        <Top data={this.props.found[0]}cardComponent={this.props.cardComponent} id=\"f1\" className=\"top\" key={1} setVar={(index, value) => setVar(index, value)} getVar={(index) => getVar(index)}/>\r\n        <Top data={this.props.found[1]}cardComponent={this.props.cardComponent} id=\"f2\" className=\"top\" key={2} setVar={(index, value) => setVar(index, value)} getVar={(index) => getVar(index)}/>\r\n        <Top data={this.props.found[2]}cardComponent={this.props.cardComponent} id=\"f3\" className=\"top\" key={3} setVar={(index, value) => setVar(index, value)} getVar={(index) => getVar(index)}/>\r\n        <Top data={this.props.found[3]}cardComponent={this.props.cardComponent} id=\"f4\" className=\"top\" key={4} setVar={(index, value) => setVar(index, value)} getVar={(index) => getVar(index)}/>\r\n        <Top cardComponent={this.props.cardComponent} id=\"useless\" className=\"top empty\"/>\r\n        <Reveal data={this.props.reveal} cardComponent={this.props.cardComponent} id=\"reveal\" className=\"top empty\" setVar={(index, value) => setVar(index, value)} getVar={(index) => getVar(index)}/>\r\n        <Trash data={this.props.trash} cardComponent={this.props.cardComponent} id=\"trash\" className=\"top\" setVar={(index, value) => setVar(index, value)} getVar={(index) => getVar(index)}/>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\n\r\nexport default class Bottom extends React.Component {\r\n  handleClick(){\r\n    this.props.getVar(\"bottomClicked\")(this.props.id[1]);\r\n  }\r\n  allowDrop(event){\r\n    event.preventDefault();\r\n  }\r\n  onDrop(event){\r\n    event.preventDefault();\r\n    let data = event.dataTransfer.getData(\"data\");\r\n    if (data){\r\n      if (this.props.getVar(\"columnHeight\")(parseInt(this.props.id[1])) === 0){\r\n        this.props.getVar(\"cardClicked\")(data, true);\r\n        this.props.getVar(\"bottomClicked\")(this.props.id[1]);\r\n      }\r\n    }\r\n  }\r\n  render(){\r\n    let CardComponent = this.props.cardComponent;\r\n    //list of cards to append\r\n    let dataList = this.props.data;\r\n    if (dataList){\r\n      return(\r\n        <div onDragOver={(e) => this.allowDrop(e)} onDrop={(e) => this.onDrop(e)} id={this.props.id} className={this.props.className} onClick={() => this.handleClick()}>\r\n          {dataList}\r\n        </div>\r\n      );\r\n    }else{\r\n      return (\r\n      <div id={this.props.id} className={this.props.className}>\r\n\r\n      </div>\r\n      );\r\n    }\r\n  } \r\n}","import React from 'react';\r\nimport Bottom from './Columns/Bottom';\r\n\r\nexport default class Columns extends React.Component {\r\n  render(){\r\n    let divs = [];\r\n    let data = this.props.data;\r\n    let getVar = this.props.getVar;\r\n    for (let i = 1; i <= 7; i ++){\r\n      let idName = \"c\" + i;\r\n      if (this.props.getVar(\"beginned\")){\r\n        divs.push(<Bottom getVar={(index) => getVar(index)} data={data[i]} cardComponent={this.props.cardComponent} id={idName} className=\"bottom\" key={i}/>);\r\n      }else{\r\n        divs.push(<Bottom getVar={(index) => getVar(index)} cardComponent={this.props.cardComponent} id={idName} className=\"bottom\" key={i}/>);\r\n      }\r\n      \r\n    }\r\n    return(\r\n      <div id={this.props.id}>\r\n        {divs}\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React from 'react';\r\n\r\nexport default class Card extends React.Component {\r\n  handleClick(){\r\n    this.props.getVar(\"cardClicked\")(this.props.id.name);\r\n  }\r\n  onDragStart(event){\r\n    event.dataTransfer.setData(\"data\", this.props.id.name);\r\n    //this.props.getVar(\"cardClicked\")(this.props.id.name, true);\r\n  }\r\n  allowDrop(event){\r\n    event.preventDefault();\r\n  }\r\n  onDrop(event){\r\n    event.preventDefault();\r\n    let data = event.dataTransfer.getData(\"data\");\r\n    if (data){\r\n      this.props.getVar(\"cardClicked\")(data, true);\r\n      this.props.getVar(\"cardClicked\")(this.props.id.name);\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <img draggable=\"true\" onDragStart={(e) => this.onDragStart(e)} onDragOver={(e) => this.allowDrop(e)} onDrop={(e) => this.onDrop(e)} id={this.props.id.name} className={this.props.className} src={this.props.src} style={this.props.style} row={this.props.row} column={this.props.column} onClick={() => this.handleClick()}>\r\n\r\n      </img>\r\n    ); \r\n  } \r\n}","import React from 'react';\r\n//components\r\nimport Table from './Main/Table.js';\r\nimport Foundation from './Main/Foundation.js';\r\nimport Columns from './Main/Columns.js';\r\n//heart and soul\r\nimport Card from './Card.js'\r\n\r\nexport default class Main extends React.Component {\r\n    //constructor\r\n    constructor(props) {\r\n        super(props);\r\n        let mainComponent = this;\r\n        let variables = {\r\n            //global var\r\n            cards: {},\r\n            trash: [],\r\n            reveal: [],\r\n            holding: false,\r\n            holder: 0,\r\n            found: {\r\n                f1: [],\r\n                f2: [],\r\n                f3: [],\r\n                f4: []\r\n            },\r\n            height: 120,\r\n            width: 88,\r\n            showPercentOfCard: 25,\r\n            timer: \"\",\r\n            time: 0,\r\n            beginned: false,\r\n            preventer: false,\r\n            lastAct: [],\r\n            //constructor\r\n            setCard: function (num, suit) {\r\n                let vars = mainComponent.state.variables;\r\n                this.name = (num - 1) * 4 + suit;\r\n                this.number = num;\r\n                this.suit = suit;\r\n                this.row = 0;\r\n                this.column = 0;\r\n                this.inTrash = function () {\r\n                    if (vars.trash.includes(this.name) || (vars.reveal.includes(this.name))) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                };\r\n                this.inFound = function () {\r\n                    for (let i = 1; i <= 4; i++) {\r\n                        if (vars.found[\"f\" + i].includes(this)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                };\r\n                this.foundNo = function () {\r\n                    if (this.inFound() === true) {\r\n                        for (let i = 1; i <= 4; i++) {\r\n                            if (vars.found[\"f\" + i].includes(this)) {\r\n                                return i;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return undefined;\r\n                    }\r\n                };\r\n                this.zAxis = 0;\r\n                this.show = false;\r\n                //check if another card is different color\r\n                this.isDiffColor = function (card) {\r\n                    //if black\r\n                    if (this.suit === 1 || this.suit === 3) {\r\n                        if (card.suit === 2 || card.suit === 4) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    //if red\r\n                    if (this.suit === 2 || this.suit === 4) {\r\n                        if (card.suit === 1 || card.suit === 3) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                };\r\n                //check if another card is 1 number higher\r\n                this.isOneLower = function (card) {\r\n                    if (this.number + 1 === card.number) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n                //check if this card is 1 number higher\r\n                this.isOneHigher = function (card) {\r\n                    if (this.number - 1 === card.number) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n                //reset pos(change position to 0, 0, also remove from reveal and trash and foundation)\r\n                this.reset = function () {\r\n                    this.row = 0;\r\n                    this.column = 0;\r\n                    if (this.inTrash() === true) {\r\n                        vars.duang(vars.trash, this.name);\r\n                        vars.duang(vars.reveal, this.name);\r\n                    }\r\n                    if (this.inFound() === true) {\r\n                        vars.duang(vars.found[\"f\" + this.foundNo()], this);\r\n                    }\r\n                };\r\n                //get the whole column of cards of this card's column\r\n                this.getColumn = function () {\r\n                    if (this.column === 0) {\r\n                        return 0;\r\n                    } else {\r\n                        //get all cards of this column\r\n                        var columnCards = [];\r\n                        for (let i = 1; i <= 52; i++) {\r\n                            var card = vars.cards[i];\r\n                            if (parseInt(card.column) === parseInt(this.column)) {\r\n                                columnCards.push(card);\r\n                            }\r\n                        }\r\n                        //sort them by their row\r\n                        var output = [];\r\n                        var breaker = 0;\r\n                        while (columnCards.length > 0) {\r\n                            breaker++;\r\n                            if (breaker >= 100) {\r\n                                console.log(\"exceed maximum loop\");\r\n                                break;\r\n                            }\r\n                            for (let i = 0; i < columnCards.length; i++) {\r\n                                if (columnCards[i].row === 1) {\r\n                                    output.push(columnCards[i]);\r\n                                    columnCards.splice(parseInt(i), 1);\r\n                                }\r\n                                if (output.length > 0 && output[output.length - 1] !== undefined) {\r\n                                    if (columnCards.length > 0 && columnCards[i] !== undefined) {\r\n                                        if (parseInt(columnCards[i].row - 1) === parseInt(output[output.length - 1].row)) {\r\n                                            output.push(columnCards[i]);\r\n                                            columnCards.splice(parseInt(i), 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        //return output\r\n                        return output;\r\n                    }\r\n                };\r\n                //check if this card is below holding \r\n                this.isBelowHolder = function () {\r\n                    if (vars.holding === true) {\r\n                        //get holder's column and check if columns are the same \r\n                        var column = vars.holder.column;\r\n                        if (column === this.column) {\r\n                            //if so check if this card is below holder\r\n                            if (vars.holder.row < this.row) {\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n            },\r\n            //functions\r\n            getCard: function (num, suit) {\r\n                return variables.cards[(num - 1) * 4 + suit];\r\n            },\r\n            getCardPos: function (column, row) {\r\n                for (let i = 1; i <= 52; i++) {\r\n                    if (variables.cards[i].row === row && variables.cards[i].inTrash() === false && variables.cards[i].inFound() === false) {\r\n                        if (variables.cards[i].column === column) {\r\n                            return variables.cards[i];\r\n                        }\r\n                    }\r\n                }\r\n                return undefined;\r\n            },\r\n            columnHeight: function (columnNo) {\r\n                var count = 0;\r\n                for (let i = 1; i <= 52; i++) {\r\n                    if (parseInt(variables.cards[i].column) === parseInt(columnNo)) {\r\n                        count++;\r\n                    }\r\n                }\r\n                return count;\r\n            },\r\n            init: function () {\r\n                variables.cards = {};\r\n                variables.trash = [];\r\n                variables.found = {\r\n                    f1: [],\r\n                    f2: [],\r\n                    f3: [],\r\n                    f4: []\r\n                };\r\n                variables.reveal = [];\r\n                variables.holder = undefined;\r\n                variables.holding = false;\r\n                variables.lastAct = [];\r\n                //card declare\r\n                for (let i = 1; i <= 13; i++) {\r\n                    for (var i2 = 1; i2 <= 4; i2++) {\r\n                        variables.cards[(i - 1) * 4 + i2] = new variables.setCard(i, i2);\r\n                    }\r\n                }\r\n\r\n                //deck create\r\n                var deck = [];\r\n                for (let i = 1; i <= 52; i++) {\r\n                    deck.push(i);\r\n                }\r\n                console.log(\"original deck: \" + deck.length);\r\n\r\n                //place cards to field\r\n                for (let i = 1; i <= 7; i++) {\r\n                    for (var i2 = 1; i2 <= i; i2++) {\r\n                        var card = deck[variables.randomInt(0, deck.length - 1)];\r\n                        variables.duang(deck, card);\r\n                        variables.cards[card].column = i;\r\n                        variables.cards[card].row = i2;\r\n                        if (i == i2) {\r\n                            variables.cards[card].show = true;\r\n                        } else {\r\n                            variables.cards[card].show = false;\r\n                        }\r\n                    }\r\n                }\r\n                console.log(\"placed to field: \" + deck.length);\r\n                //place cards to trash\r\n                var deckLength = deck.length;\r\n                for (let i = 0; i < deckLength; i++) {\r\n                    var card = deck[variables.randomInt(0, deck.length - 1)];\r\n                    variables.duang(deck, card);\r\n                    variables.trash.push(card);\r\n                }\r\n                console.log(\"placed to trash: \" + deck.length);\r\n                //hides preload docs\r\n                //$(\".preload\").hide();\r\n\r\n                //render up\r\n                variables.render();\r\n\r\n                //reset timer\r\n                variables.time = 0;\r\n                //$(\"#timer\").text(\"00:00\");\r\n\r\n                //only once\r\n                if (variables.beginned === false) {\r\n                    variables.beginned = true;\r\n                    variables.timer = setInterval(function () {\r\n                        variables.time++;\r\n                        mainComponent.setState({variables: variables});//$(\"#timer\").text(minute+\":\"+second);\r\n                    }, 1000);\r\n                }\r\n\r\n                //end of init\r\n            },\r\n            render: function () {\r\n                let showPercentOfCard = variables.showPercentOfCard;\r\n                let height = variables.height;\r\n                let cards = variables.cards;\r\n                let holder = variables.holder;\r\n                //Any necessary changes relative to cards\r\n                //if the bottommost card in a column is facedown, then flip it up\r\n                for (let i = 1; i <= 7; i++) {\r\n                    for (var i2 = 1; i2 <= 17; i2++) {\r\n                        var card = variables.getCardPos(i, i2);\r\n                        if (card !== undefined) {\r\n                            if (card.show === false && variables.getCardPos(i, i2 + 1) === undefined) {\r\n                                card.show = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //real rendering process\r\n                //render in field\r\n                let allColumnComponents = [];\r\n                for (var i = 1; i <= 7; i ++){\r\n                    let columnComponents = [];\r\n                    for (var i2 = 1; i2 <= 17; i2 ++){\r\n                        var card = variables.getCardPos(i, i2);\r\n                        if (card !== undefined){\r\n                            //turn into props instead\r\n                            var element = {}//$(\"<img>\").attr(\"class\",\"card\");\r\n                            element.class = \"card\";\r\n                            element.id = card;//element.attr(\"id\", card.name);\r\n                            element.column = i;//element.addClass(\"c\"+i);\r\n                            element.row = i2;//element.addClass(\"r\"+i2);\r\n                            if (card.show === true){\r\n                                element.src = \"cards/\" + card.number + \"_\" + card.suit + \".png\";//element.attr(\"src\", \"cards/\" + card.number + \"_\" + card.suit + \".png\");\r\n                            } else {\r\n                                element.class = element.class + \" unclickable\"//element.addClass(\"unclickable\");\r\n                                element.src = \"cards/back.png\";//element.attr(\"src\", \"cards/back.png\");\r\n                            }\r\n                            //add height to each cards\r\n                            element.style = {}\r\n                            element.style.top = (i2 - 1) * (100 - showPercentOfCard) / 100 * height * -1+\"px\";//element.css(\"top\", (i2 - 1) * (100 - showPercentOfCard) / 100 * height * -1+\"px\");\r\n                            //add z-axis to each cards\r\n                            element.style[\"zIndex\"] = i;//element.css(\"z-index\", i);\r\n                            //add highlight if holder is same \r\n                            if (variables.holder === card){\r\n                                //check if holder is last card\r\n                                if (variables.holder.getColumn()[variables.holder.getColumn().length - 1] === variables.holder){\r\n                                   element.class += \" highlightLoner\"; //element.addClass(\"highlightLoner\");\r\n                                } else {\r\n                                    element.class += \" highlight\";//element.addClass(\"highlight\");\r\n                                }\r\n                            }\r\n                            //add midlight if below holder\r\n                            //add lowlight if last below holder\r\n                            if (card.isBelowHolder() === true){\r\n                                if (card.getColumn()[card.getColumn().length - 1] === card){\r\n                                    element.class += \" lowlight\";//element.addClass(\"lowlight\");\r\n                                } else {\r\n                                    element.class += \" midlight\";//element.addClass(\"midlight\");\r\n                                }\r\n                            }\r\n                            element.style.width = variables.width+\"px\";\r\n                            element.style.height = variables.height+\"px\";\r\n                            //$(\"#c\"+i).append(element);\r\n                            //react is cancer\r\n                            columnComponents.push(<Card key={element.column + \":\" + element.row} getVar={(index) => mainComponent.getVar(index)} className={element.class} style={element.style} src={element.src} id={element.id} column={element.column} row={element.row}/>);\r\n                        }else{\r\n                            break;\r\n                        }\r\n                    }\r\n                    //push columnComponent\r\n                    allColumnComponents[i] = columnComponents;\r\n                }\r\n                let allTrashComponents = [];\r\n                //render in trash\r\n                let trash = variables.trash;\r\n                for (var i = 0; i < trash.length; i ++){\r\n                    var element = {}\r\n                    element.class = \"class\";// var element = $(\"<img>\").attr(\"class\",\"card\");\r\n                    element.id = variables.cards[trash[i]];// element.attr(\"id\", cards[trash[i]]);\r\n                    element.class += \" trash\";// element.addClass(\"trash\");\r\n                    element.class += \" unclickable\";// element.addClass(\"unclickable\");\r\n                    element.src = \"cards/back.png\";// element.attr(\"src\", \"cards/back.png\");\r\n                    element.style = {};\r\n                    element.style.width = variables.width+\"px\";\r\n                    element.style.height = variables.height+\"px\";\r\n                    allTrashComponents.push(<Card key={i} getVar={(index) => mainComponent.getVar(index)} className={element.class} id={element.id} src={element.src} style={element.style}/>);// $(\"#trash\").append(element);\r\n                }\r\n                //render in reveal\r\n                let allRevealComponents = [];\r\n                let reveal = variables.reveal;\r\n                for (var i = 0; i < reveal.length; i ++){\r\n                    var card = cards[reveal[i]];\r\n                    var element = {class: \"card\"};// var element = $(\"<img>\").attr(\"class\",\"card\");\r\n                    element.id = card;// element.attr(\"id\", reveal[i]);\r\n                    element.class += \" reveal\";// element.addClass(\"reveal\");\r\n                    element.src = \"cards/\" + card.number + \"_\" + card.suit + \".png\";// element.attr(\"src\", \"cards/\" + card.number + \"_\" + card.suit + \".png\");\r\n                    if (holder === card){\r\n                        element.class += \" highlight\";//element.addClass(\"highlight\");\r\n                    }\r\n                    element.style = {};\r\n                    element.style.width = variables.width+\"px\";\r\n                    element.style.height = variables.height+\"px\";\r\n                    allRevealComponents.push(<Card key={i} getVar={(index) => mainComponent.getVar(index)} src={element.src} className={element.class} src={element.src} id={element.id} style={element.style}/>);//$(\"#reveal\").append(element);\r\n                }\r\n                //render in foundation\r\n                let allFoundComponents = [];\r\n                let found = variables.found;\r\n                for (var i2 = 1; i2 <= 4; i2 ++){\r\n                    var foundation = found[\"f\"+i2];\r\n                    let oneFoundComponents = [];\r\n                    for (var i = 0; i < foundation.length; i ++){\r\n                        var card = foundation[i];\r\n                        var element = {};\r\n                        element.class = \"card\";// var element = $(\"<img>\").attr(\"class\",\"card\");\r\n                        element.id = foundation[i];// element.attr(\"id\", foundation[i].name);\r\n                        element.class += \" foundCard\";// element.addClass(\"foundCard\");\r\n                        element.class += \" unclickable\";// element.addClass(\"unclickable\");\r\n                        element.src = \"cards/\" + card.number + \"_\" + card.suit + \".png\";// element.attr(\"src\", \"cards/\" + card.number + \"_\" + card.suit + \".png\");\r\n                        if (holder === card){\r\n                            element.class += \" highlight\";//element.addClass(\"highlight\");\r\n                        }\r\n                        element.style = {};\r\n                        element.style.width = variables.width+\"px\";\r\n                        element.style.height = variables.height+\"px\";\r\n                        // $(\"#f\"+i2).append(element);\r\n                        oneFoundComponents.push(<Card key={i + \":\" + i2} getVar={(index) => mainComponent.getVar(index)} className={element.class} id={element.id} src={element.src} style={element.style}/>);\r\n                    }\r\n                    allFoundComponents.push(oneFoundComponents);\r\n                };\r\n                this.checkVictory();\r\n                console.log(this.lastAct);\r\n\r\n                //react is cancer\r\n                mainComponent.setState({\r\n                    allColumnComponents: allColumnComponents,\r\n                    allTrashComponents: allTrashComponents,\r\n                    allRevealComponents: allRevealComponents,\r\n                    allFoundComponents: allFoundComponents\r\n                });\r\n            },\r\n            //misc functions\r\n            duang: function (thing, string) {\r\n                if (thing.includes(string)) {\r\n                    thing.splice(thing.indexOf(string), 1);\r\n                }\r\n            },\r\n            randomInt: function (min, max) {\r\n                return Math.floor(Math.random() * (max - min + 1)) + min;\r\n            },\r\n            //component specific function\r\n            trashClicked: function () {\r\n                //record move\r\n                variables.lastAct.push(\"undefined,trash,undefined,undefined\");\r\n                //clear all selections\r\n                variables.holding = false;\r\n                variables.holder = undefined;\r\n                //reveal a card if trash is not empty\r\n                let trash = variables.trash;\r\n                let cards = variables.cards;\r\n                let reveal = variables.reveal;\r\n                if (trash.length > 0) {\r\n                    var card = trash.shift();\r\n                    reveal.push(card);\r\n                    cards[card].show = true;\r\n                    variables.render();\r\n                } else {\r\n                    //..else place reveals back into the trash\r\n                    //pre-record the length of reveal\r\n                    var length = reveal.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        //change them into facedown\r\n                        var card = reveal.shift();\r\n                        cards[card].show = false;\r\n                        //shift back\r\n                        trash.push(card);\r\n                    }\r\n                    variables.render();\r\n                }\r\n            },\r\n            cardClicked: function (id, drag) {\r\n                var card = variables.cards[parseInt(id)];\r\n                //ignore holding if dragging\r\n                if (drag){\r\n                    variables.holder = 0;\r\n                    variables.holding = false;\r\n                }\r\n                //main function (just for quick use of return)\r\n                function mainDish() {\r\n                    //check if card is face up\r\n                    if (card.show === true) {\r\n                        //release a card if holding a card\r\n                        if (variables.holding === true) {\r\n                            //check if holding the same card\r\n                            if (card === variables.holder) {\r\n                                //check if can move to foundation\r\n                                for (var i = 4; i >= 1; i--) {\r\n                                    var foundation = variables.found[\"f\" + i];\r\n                                    //check if not empty\r\n                                    if (foundation.length > 0) {\r\n                                        //get last card in foundation\r\n                                        var last = foundation[foundation.length - 1];\r\n                                        if (variables.holder.isOneHigher(last)) {\r\n                                            //then check if suits are the same\r\n                                            if (variables.holder.suit === last.suit) {\r\n                                                //then check if the holder card is the last card at the column\r\n                                                //or in trash\r\n                                                if (variables.getCardPos(variables.holder.column, variables.holder.row + 1) === undefined || variables.holder.inTrash() === true) {\r\n                                                    //record action\r\n                                                    if (variables.holder.inTrash() === true) {\r\n                                                        variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"trash\" + \",\" + number);\r\n                                                    } else {\r\n                                                        variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row + \",\" + number);\r\n                                                    }\r\n                                                    //reset the card's position\r\n                                                    variables.holder.reset();\r\n                                                    //then move holder to the foundation\r\n                                                    foundation.push(variables.holder);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        //if empty\r\n                                        //if ace then push to found\r\n                                        if (card.number === 1) {\r\n                                            //record action\r\n                                            if (variables.holder.inTrash() === true) {\r\n                                                variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"trash\" + \",\" + number);\r\n                                            } else {\r\n                                                variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row + \",\" + number);\r\n                                            }\r\n                                            //reset the card's position\r\n                                            variables.holder.reset();\r\n                                            //then move holder to the foundation\r\n                                            foundation.push(variables.holder);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //remove holding status\r\n                                variables.holder = undefined;\r\n                                variables.holding = false;\r\n                                return;\r\n                            }\r\n                            //check if releasing onto the right card\r\n                            //check if clicked card is not on trash and foundation\r\n                            if (card.inTrash() === false && card.inFound() === false) {\r\n                                //then check if able to move\r\n                                if (variables.holder.isDiffColor(card) && variables.holder.isOneLower(card) && card.getColumn()[card.getColumn().length - 1] === card) {\r\n                                    //if holder is on the field\r\n                                    if (variables.holder.inTrash() === false && variables.holder.inFound() === false) {\r\n                                        var row = variables.holder.row;\r\n                                        var column = variables.holder.column;\r\n                                        //if so then move the the holder and cards under holder under the card\r\n                                        //put all cards under the holder into a list\r\n                                        var list = [];\r\n                                        for (var i = variables.holder.row; i <= 17; i++) {\r\n                                            var cardBelow = variables.getCardPos(variables.holder.column, i);\r\n                                            if (cardBelow !== undefined) {\r\n                                                list.push(cardBelow);\r\n                                            } else {\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        //after the list has been filled(or not) move them under the (clicked)card\r\n                                        //store the list length first\r\n                                        var listLength = list.length;\r\n                                        //set lastAct linkage\r\n                                        let lastActLink = \"\";\r\n                                        //iterate the list\r\n                                        for (var i = 0; i < listLength; i++) {\r\n                                            //set column same as the card\r\n                                            list[i].column = card.column;\r\n                                            //set row below the card in a fast way\r\n                                            list[i].row = card.row + i + 1;\r\n                                            //import card into link\r\n                                            if (i > 0){\r\n                                                lastActLink += \":\" + list[i].name;\r\n                                            }else{\r\n                                                lastActLink = list[i].name;\r\n                                            }\r\n                                        }\r\n                                        //record moving act\r\n                                        variables.lastAct.push(lastActLink + \",\" + \"move\" + \",\" + \"C\" + column + \"R\" + row + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row);\r\n                                    } else {\r\n                                        //if in trash then move directly to field\r\n                                        if (variables.holder.inTrash() === true) {\r\n                                            variables.holder.column = card.column;\r\n                                            variables.holder.row = card.row + 1;\r\n                                            //also remove holder in reveal pile\r\n                                            variables.duang(variables.reveal, variables.holder.name);\r\n                                            //record moving act\r\n                                            variables.lastAct.push(variables.holder.name + \",\" + \"move\" + \",\" + \"trash\" + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row);\r\n                                        }\r\n                                        //if in foundation then remove foundation status\r\n                                        if (variables.holder.inFound() === true) {\r\n                                            var number = variables.found[\"f\" + variables.holder.foundNo()];\r\n                                            variables.holder.column = card.column;\r\n                                            variables.holder.row = card.row + 1;\r\n                                            //same as trash\r\n                                            variables.duang(number, variables.holder);\r\n                                            //record moving act\r\n                                            variables.lastAct.push(variables.holder.name + \",\" + \"move\" + \",\" + variables.holder.foundNo() + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row);\r\n                                        }\r\n                                    }\r\n                                    //remove holding status\r\n                                    variables.holding = false;\r\n                                    variables.holder = undefined;\r\n                                    //and that's it\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n\r\n\r\n                            //end of if holding\r\n                        }\r\n                        //take up a card if holding nothing\r\n                        if (variables.holding === false) {\r\n                            variables.holding = true;\r\n                            variables.holder = card;\r\n                            return;\r\n                        }\r\n                        //end of if card is face up\r\n                    }\r\n                };\r\n                //just add a function to use return\r\n                mainDish();\r\n                variables.render();\r\n            },\r\n            bottomClicked: function(id) {\r\n                var column = parseInt(id);\r\n                //check if holding a card and is a king\r\n                if (variables.holding === true){\r\n                    var row = variables.holder.row;\r\n                    if (variables.holder.number === 13){\r\n                        //check if column is empty\r\n                        if (variables.columnHeight(column) === 0){\r\n                            //if it's empty then move the whole thing under it\r\n                            //gathering list(done by c & p)\r\n                            var list = [];\r\n                            list.push(variables.holder);\r\n                            for (var i = variables.holder.row + 1; i <= 17; i ++){\r\n                                var cardBelow = variables.getCardPos(variables.holder.column, i);\r\n                                if (cardBelow !== undefined){\r\n                                    list.push(cardBelow);\r\n                                } else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            //last act link\r\n                            let lastActLink = \"\";\r\n                            //move them under the column\r\n                            for (var i = 0; i < list.length; i ++){\r\n                                //move to correct place\r\n                                list[i].column = parseInt(column);\r\n                                list[i].row = i + 1;\r\n                                //linking\r\n                                if (i > 0){\r\n                                    lastActLink += \":\" + list[i].name;\r\n                                }else{\r\n                                    lastActLink = list[i].name;\r\n                                }\r\n                            }\r\n                            if (variables.holder.inTrash() === true){\r\n                                variables.lastAct.push(variables.holder.name + \",\" + \"move\" + \",\" + \"trash\" + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row);\r\n                            } else if (variables.holder.inFound() === true) {\r\n                                variables.lastAct.push(variables.holder.name + \",\" + \"move\" + \",\" + \"found\" + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row);\r\n                            } else {\r\n                                variables.lastAct.push(lastActLink + \",\" + \"move\" + \",\" + \"C\" + column + \"R\" + row + \",\" + \"C\" + variables.holder.column + \"R\" + variables.holder.row);\r\n                            }\r\n                            //if holder is in trash, remove from trash(or reveal)\r\n                            if (variables.holder.inTrash() === true){\r\n                                variables.duang(variables.reveal, variables.holder.name);\r\n                            }\r\n                            //if holder is in foundation, then the player is dumb\r\n                            if (variables.holder.inFound() === true){\r\n                                variables.duang(variables.found[\"f\"+variables.holder.foundNo()], variables.holder);\r\n                            }\r\n                            //remove holding status\r\n                            variables.holder = undefined;\r\n                            variables.holding = false;\r\n                            variables.render();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            topClicked: function(id){\r\n                //move cards to foundation\r\n                var number = parseInt(id);\r\n                //check if it's a number\r\n                if (!isNaN(number)){\r\n                    //if so then the player clicks the foundation (which is an array)\r\n                    var foundation = variables.found[\"f\"+number];\r\n                    //check if holding a card\r\n                    if (variables.holding === true){\r\n                        //check if holding card is in foundation\r\n                        if (variables.holder.inFound() === true){\r\n                            //wat wat wat wat wat wat wat\r\n                            variables.holding = false;\r\n                            variables.holder = undefined;\r\n                            variables.render();\r\n                            return;\r\n                        }\r\n                        //check if foundation is empty\r\n                        if (foundation.length === 0){\r\n                            //check if the card holding is an ace\r\n                            if (parseInt(variables.holder.number) === 1){\r\n                                //record action\r\n                                if (variables.holder.inTrash() === true){\r\n                                    variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"trash\" +\",\" + number);\r\n                                } else {\r\n                                    variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"C\"+variables.holder.column + \"R\"+variables.holder.row + \",\" + number);\r\n                                }\r\n                                //reset the card's position\r\n                                variables.holder.reset();\r\n                                //then move the card to foundation\r\n                                foundation.push(variables.holder);\r\n                                //remove holding status\r\n                                variables.holding = false;\r\n                                variables.holder = undefined;\r\n                                variables.render();\r\n                            }\r\n                        } else {\r\n                            var last = foundation[foundation.length - 1];\r\n                            //else check if the card that is holding is one more number than the last card in foundation\r\n                            if (variables.holder.isOneHigher(last)){\r\n                                //then check if suits are the same\r\n                                if (variables.holder.suit === last.suit){\r\n                                    //then check if the holder card is the last card at the column\r\n                                    if (variables.getCardPos(variables.holder.column, variables.holder.row + 1) === undefined){\r\n                                        //record action\r\n                                        if (variables.holder.inTrash() === true){\r\n                                            variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"trash\" +\",\" + number);\r\n                                        } else {\r\n                                            variables.lastAct.push(variables.holder.name + \",\" + \"found\" + \",\" + \"C\"+variables.holder.column + \"R\"+variables.holder.row + \",\" + number);\r\n                                        }\r\n                                        //reset the card's position\r\n                                        variables.holder.reset();\r\n                                        //then move holder to the foundation\r\n                                        foundation.push(variables.holder);\r\n                                        //remove holding status\r\n                                        variables.holding = false;\r\n                                        variables.holder = undefined;\r\n                                        variables.render();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                    //if not holding a card then check if any card is on foundation\r\n                        if (foundation.length > 0){\r\n                            //if so hold the last card in the foundation\r\n                            var card = foundation[foundation.length - 1];\r\n                            variables.holding = true\r\n                            variables.holder = card;\r\n                            variables.render();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            takeBack: function(){\r\n                console.log(variables.lastAct);\r\n                if (variables.lastAct.length > 0){\r\n                    var code = variables.lastAct[variables.lastAct.length - 1].split(\",\");\r\n                    var name = code[0];\r\n                    if (name.indexOf(\":\") !== -1){\r\n                        name = name.substring(0, name.indexOf(\":\"));\r\n                    }\r\n                    var action = code[1];\r\n                    var prev = code[2];\r\n                    var next = code[3];\r\n                    //move action\r\n                    if (action === \"move\"){\r\n                        //aka move from anywhere to field\r\n                        //from trash or found\r\n                        if (prev === \"trash\" || prev.length === 1){\r\n                            console.log(variables.trash);\r\n                            //reset card\r\n                            variables.cards[name].reset();\r\n                            //then push back to reveal\r\n                            if (prev === \"trash\"){\r\n                                variables.reveal.push(parseInt(name));\r\n                            } else {\r\n                                //push back to foundation\r\n                                variables.found[\"f\"+prev].push(parseInt(name));\r\n                            }\r\n                            variables.lastAct.pop();\r\n                        }else\r\n                        //from field\r\n                        if (prev.length > 1){\r\n                            //get previous location\r\n                            var cPos = prev.indexOf(\"C\");\r\n                            var rPos = prev.indexOf(\"R\");\r\n                            //get the card's column\r\n                            var columnCards = variables.cards[name].getColumn();\r\n                            var descend = [];\r\n                            //loop through the columns starting from the moved card\r\n                            for (var i = variables.cards[name].row; i <= columnCards.length; i ++){\r\n                                //push any cards below the worked card to the array\r\n                                descend.push(columnCards[i - 1]);\r\n                            }\r\n                            console.log(\"descend: \"+descend);\r\n                            //send all cards back in time\r\n                            var targetColumn = parseInt(prev.substring(cPos + 1, rPos));\r\n                            var targetRow = parseInt(prev.substring(rPos + 1));\r\n                            for (var i = targetRow; i < targetRow + descend.length; i ++){\r\n                                descend[i - targetRow].column = targetColumn;\r\n                                descend[i - targetRow].row = i;\r\n                            }\r\n                            console.log(\"getting pos\");\r\n                            console.log(variables.getCardPos(variables.cards[name].column, variables.cards[name].row - 1));\r\n                            //cover up the exposed card\r\n                            if (variables.getCardPos(variables.cards[name].column, variables.cards[name].row - 1) !== undefined){\r\n                                variables.getCardPos(variables.cards[name].column, variables.cards[name].row - 1).show = false;\r\n                            }\r\n                            variables.lastAct.pop();\r\n                        }\r\n                    }\r\n                    //trash action\r\n                    if (action === \"trash\"){\r\n                        //aka when trash is clicked\r\n                        //when open one\r\n                        if (variables.reveal.length > 0){\r\n                            variables.trash.unshift(variables.reveal.pop());\r\n                        }else{\r\n                            //when back shuffled\r\n                            //move all back in reveal\r\n                            var length = variables.trash.length;\r\n                            for (var i = length - 1; i >= 0; i--) {\r\n                                //change them into facedown\r\n                                var card = variables.trash.pop();\r\n                                variables.cards[card].show = true;\r\n                                //shift back\r\n                                variables.reveal.unshift(card);\r\n                            }\r\n                        }\r\n                        //cancel record\r\n                        variables.lastAct.pop();\r\n                    }\r\n                    //found action\r\n                    if (action === \"found\"){\r\n                        //aka move from anywhere to found\r\n                        //if prev loaction is trash\r\n                        if (prev === \"trash\"){\r\n                            //reset card\r\n                            variables.cards[name].reset();\r\n                            //then push back to reveal\r\n                            variables.reveal.push(parseInt(name));\r\n                            variables.lastAct.pop();\r\n                        } else {\r\n                            //reset card\r\n                            variables.cards[name].reset();\r\n                            //set to previous location\r\n                            var cPos = prev.indexOf(\"C\");\r\n                            var rPos = prev.indexOf(\"R\");\r\n                            //cover up the exposed card\r\n                            if (variables.getCardPos(parseInt(prev.substring(cPos + 1, rPos)), parseInt(prev.substring(rPos + 1)) - 1) !== undefined){\r\n                                variables.getCardPos(parseInt(prev.substring(cPos + 1, rPos)), parseInt(prev.substring(rPos + 1)) - 1).show = false;\r\n                            }\r\n                            variables.cards[name].column = parseInt(prev.substring(cPos + 1, rPos));\r\n                            variables.cards[name].row = parseInt(prev.substring(rPos + 1));\r\n                            variables.lastAct.pop();\r\n                        }\r\n                    }\r\n                }\r\n                //render stuff\r\n                variables.render();\r\n                //reset holding\r\n                variables.holder = 0;\r\n                variables.holding = false;\r\n            },\r\n            checkVictory: function(){\r\n                //win after all cards are top left\r\n                let found = variables.found;\r\n                for (let key in found){\r\n                    let foundation = found[key];\r\n                    //empty?\r\n                    if (foundation.length === 0){\r\n                        return false;\r\n                    }\r\n                    //last card\r\n                    if (foundation[foundation.length - 1].number !== 13){\r\n                        return false;\r\n                    }\r\n                }\r\n                //this means you win\r\n                mainComponent.setState({win: true});\r\n            }\r\n        };\r\n        //final set\r\n        this.state = { \r\n            variables: variables,\r\n            win: false,\r\n            allColumnComponents: [],\r\n            allFoundComponents: [],\r\n            allRevealComponents: [],\r\n            allTrashComponents: []\r\n        };\r\n    }\r\n    //retry game\r\n    retryGame(){\r\n        this.setState({win: false});\r\n        this.state.variables.init();\r\n    }\r\n    //profiting children\r\n    setVar(index, value) {\r\n        let variables = this.state.variables;\r\n        variables[index] = value;\r\n        this.setState({ variables: variables });\r\n    }\r\n\r\n    getVar(index) {\r\n        return this.state.variables[index];\r\n    }\r\n\r\n    //rendering\r\n    render() {\r\n        let vars = this.state.variables;\r\n        let allCardPictures = [];\r\n        for (let i = 1; i <= 13; i++) {\r\n            for (let j = 1; j <= 4; j++) {\r\n                let source = \"cards/\" + i + \"_\" + j + \".png\";\r\n                allCardPictures.push(<img className=\"preload\" src={source} alt=\"\" key={i + \":\" + j} ></img>);\r\n            }\r\n        }\r\n        if (this.state.win){\r\n            return (\r\n                <div className=\"App\">\r\n                    <h1>Congratulation! You beat the game!</h1>\r\n                    <p>Your time is: {this.variables.time}</p>\r\n                    <button onClick={() => this.retryGame()}>Retry</button>\r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div className=\"App\">\r\n                    <Table setVar={(index, value) => this.setVar(index, value)} getVar={(index) => this.getVar(index)} />\r\n                    <div className=\"preload\">\r\n                        {allCardPictures}\r\n                        <img className=\"preload\" src=\"cards/back.png\" alt=\"\" key={0} ></img>\r\n                    </div>\r\n                    <div id=\"father\">\r\n                        <div id=\"top\">\r\n                            <Foundation trash={this.state.allTrashComponents} reveal={this.state.allRevealComponents} found={this.state.allFoundComponents} id=\"foundation\" setVar={(index, value) => this.setVar(index, value)} getVar={(index) => this.getVar(index)} cardComponent={Card} />\r\n                        </div>\r\n                        <Columns data={this.state.allColumnComponents} id=\"columns\" setVar={(index, value) => this.setVar(index, value)} getVar={(index) => this.getVar(index)} cardComponent={Card} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","//import all important stuffs\r\nimport React from 'react';\r\nimport './App.css'; \r\nimport Main from './components/Main'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}